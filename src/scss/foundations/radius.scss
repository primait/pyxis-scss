@use "../lib";
@use "breakpoints";

/**
 * Border radius map
 *
 * @type Map
 * @access private
 */
$_radius: (
  xl: 25px,
  l: 20px,
  m: 15px,
  s: 10px,
  xs: 5px,
);

/**
 * List of allowed edges for border-radius
 *
 * @type List
 * @access private
 */
$_edges: (all, top, right, bottom, left);

/**
 * Returns the radius value from map $_radius
 *
 * @param {String} $size - Size of radius
 * @return {String} Representation of radius size
 * @throws {Error}
 *
 * @access private
 */
@function _radius($size) {
  @return lib.rem(lib.getOrDie($_radius, $size));
}

/**
 * Includes border-radius by size and edge
 *
 * @param {String} $size - Name of the size
 * @param {String} $edge - Edge to apply the border-radius
 * @throws {Error}
 *
 * @access public
 */
@mixin radius($size, $edge: all) {
  @if index($_edges, $edge) {
    @if $edge == top {
      border-radius: _radius($size) _radius($size) 0 0;
    } @else if $edge == right {
      border-radius: 0 _radius($size) _radius($size) 0;
    } @else if $edge == bottom {
      border-radius: 0 0 _radius($size) _radius($size);
    } @else if $edge == left {
      border-radius: _radius($size) 0 0 _radius($size);
    } @else {
      border-radius: _radius($size);
    }
  } @else {
    @error "Edge `#{$edge}` is not present in map `$_edges`";
  }
}

/**
 * Create atom classes for all radius in $_radius map
 *
 * @access public
 */
@mixin createAtoms() {
  @each $size, $_ in $_radius {
    .radius-#{$size} {
      @include radius($size);
    }
  }
}
