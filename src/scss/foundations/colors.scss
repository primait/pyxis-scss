@use "../lib";
@use "../tokens/colors" as token;

$_gradientAction: linear-gradient(45deg, token.$color-action-base, token.$color-action-light);
$_gradientBrand: linear-gradient(45deg, token.$color-brand-base, token.$color-brand-light);
$_gradientNeutral: linear-gradient(45deg, token.$color-neutral-25, token.$color-neutral-base);

/**
 * The color palette of Pyxis
 *
 * @type Map
 * @access private
 */
$_colors: (
  actionBase: token.$color-action-base,
  actionDark: token.$color-action-dark,
  actionLight: token.$color-action-light,
  alertBase: token.$color-alert-base,
  alertDark: token.$color-alert-dark,
  alertLight: token.$color-alert-light,
  brandBase: token.$color-brand-base,
  brandDark: token.$color-brand-dark,
  brandLight: token.$color-brand-light,
  errorBase: token.$color-error-base,
  errorDark: token.$color-error-dark,
  errorLight: token.$color-error-light,
  neutral25: token.$color-neutral-25,
  neutral50: token.$color-neutral-50,
  neutral75: token.$color-neutral-75,
  neutral85: token.$color-neutral-85,
  neutral95: token.$color-neutral-95,
  neutralBase: token.$color-neutral-base,
  neutralLight: token.$color-neutral-light,
  successBase: token.$color-success-base,
  successDark: token.$color-success-dark,
  successLight: token.$color-success-light,
);

/**
 * The color palette for text
 *
 * @type List
 * @access private
 */
$_textColors: (
  actionBase,
  alertBase,
  brandBase,
  errorBase,
  neutral25,
  neutralBase,
  neutralLight,
  successBase,
);

/**
 * The gradient palette of Pyxis
 *
 * @type Map
 * @access private
 */
$_gradients: (
  action: $_gradientAction,
  brand: $_gradientBrand,
  neutral: $_gradientNeutral,
);

/**
 * Returns the $color hex from map $_colors
 *
 * @param {String} $color - Name of color
 * @return {Color} Representation of named color
 * @throws {Error}
 *
 * @access public
 */
@function color($color) {
  @return lib.getOrDie($_colors, $color);
}

/**
 * Returns the $gradient from map $_gradients
 *
 * @param {String} $gradient - Name of gradient
 * @return {Color} Representation of named color
 * @throws {Error}
 *
 * @access public
 */
@function gradient($gradient) {
  @return lib.getOrDie($_gradients, $gradient);
}

/**
 * Create atom classes for all colors variant in $_colors map.
 *
 * @access public
 */
@mixin createAtoms() {
  @each $colorName, $colorValue in $_colors {
    .bg-#{lib.camelToKebabCase($colorName)} {
      background-color: $colorValue;
    }
  }

  @each $gradientName, $gradientValue in $_gradients {
    .gradient-#{lib.camelToKebabCase($gradientName)} {
      background: $gradientValue;
    }
  }

  @each $color in $_textColors {
    .c-#{lib.camelToKebabCase($color)} {
      color: color($color);
    }
  }
}
