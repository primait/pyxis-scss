@use "../lib";
@use "breakpoints";

/**
 * Responsive spacing map
 * The first key is the name of size (xxxl, xxl, xl, l, m, s, xs, xxs, xxxs)
 * The second key is breakpoint (base, medium, large, xlarge)
 *
 * @type Map
 * @access private
 */
$_spacings: (
  xxxl: (
    base: 50px,
    medium: 60px,
    large: 100px,
    xlarge: 120px,
  ),
  xxl: (
    base: 40px,
    medium: 50px,
    large: 80px,
  ),
  xl: (
    base: 35px,
    medium: 40px,
    large: 60px,
  ),
  l: (
    base: 30px,
    medium: 35px,
    large: 40px,
  ),
  m: (
    base: 25px,
    medium: 30px,
  ),
  s: (
    base: 20px,
  ),
  xs: (
    base: 15px,
  ),
  xxs: (
    base: 10px,
  ),
  xxxs: (
    base: 5,
  ),
  zero: (
    base: 0,
  )
);

/**
 * Includes the size contained in the spacings map on property in every breakpoints
 *
 * @param {String} $size - Name of the size
 * @param {String} $property - Name of the property
 * @param {Boolean} $lastChildReset - Remove spacing in last child
 * @throws {Error}
 *
 * @access private
 */
@mixin _spacing($size, $property, $lastChildReset: false) {
  @each $breakpoint, $space in lib.getOrDie($_spacings, $size) {
    @include breakpoints.mq($breakpoint) {
      #{$property}: lib.rem($space);
    }
  }

  @if $lastChildReset {
    &:last-child {
      #{$property}: 0;
    }
  }
}

/**
 * Includes equal padding by size contained in the spacings map in every breakpoints.
 * An inset offers indents content on all four sides.
 *
 * @param {String} $size - Name of the size
 * @throws {Error}
 *
 * @access public
 */
@mixin inset($size) {
  @include _spacing($size, "padding");
}

/**
 * Includes unequal padding for vertical and horizontal edge
 * by size contained in the spacings map in every breakpoints.
 * Unlike the inset the squish is used to have different indentations
 + between horizontal and vertical sides.
 *
 * @param {String} $size - Name of the size
 * @throws {Error}
 *
 * @access public
 */
@mixin squish($verticalSize, $horizontalSize) {
  @include _spacing($horizontalSize, "padding-left");
  @include _spacing($horizontalSize, "padding-right");
  @include _spacing($verticalSize, "padding-bottom");
  @include _spacing($verticalSize, "padding-top");
}

/**
 * Includes margin-bottom by size contained in the spacings map in every breakpoints.
 * It is used to stack the elements one under the other.
 *
 * @param {String} $size - Name of the size
 * @throws {Error}
 *
 * @access public
 */
@mixin stack($size) {
  @include _spacing($size, "margin-bottom", true);
}

/**
 * Includes margin-right by size contained in the spacings map in every breakpoints.
 * Same as stack, but serves to space out horizontally elements (inline).
 *
 * @param {String} $size - Name of the size
 * @throws {Error}
 *
 * @access public
 */
@mixin inline($size) {
  @include _spacing($size, "margin-right", true);
}

/**
 * Includes grid-row-gap by size contained in the spacings map in every breakpoints
 * Same as stack, but used to space out vertical elements in case a grid is used (display: grid).
 *
 * @param {String} $size - Name of the size
 * @throws {Error}
 *
 * @access public
 */
@mixin rowGap($size) {
  @include _spacing($size, "grid-row-gap");
}

/**
 * Includes grid-column-gap by size contained in the spacings map in every breakpoints
 * Like inline, but used to space out horizontal elements in case a grid is used (display: grid).
 *
 * @param {String} $size - Name of the size
 * @throws {Error}
 *
 * @access public
 */
@mixin columnGap($size) {
  @include _spacing($size, "grid-column-gap");
}

/**
 * Create atom classes for all spacing in $_spacings map
 *
 * @access public
 */
@mixin createAtoms() {
  @each $size, $_ in map-remove($_spacings, zero) {
    .inset-#{$size} {
      @include inset($size);
    }

    .squish-h-#{$size} {
      @include _spacing($size, "padding-left");
      @include _spacing($size, "padding-right");
    }

    .squish-v-#{$size} {
      @include _spacing($size, "padding-bottom");
      @include _spacing($size, "padding-top");
    }

    .stack-#{$size} {
      @include stack($size);
    }

    .inline-#{$size} {
      @include inline($size);
    }

    .row-gap-#{$size} {
      @include rowGap($size);
    }

    .column-gap-#{$size} {
      @include columnGap($size);
    }
  }
}
