@use "../lib";
@use "breakpoints";
@use "global";

/**
 * Physical address of the fonts-containing folder
 * @type String
 * @access public
 */
$fontPath: "../assets/fonts" !default;

/**
 * Name of Pyxis base font-family
 *
 * @type String
 * @access private
 */
$_fontFamily: "Circular";

/**
 * Base font-family with fallback
 *
 * @type Number
 * @access private
 */
$_fontFamilyWithFallback: $_fontFamily, "Arial", sans-serif;

/**
 * Font feature settings for Circular font
 * The "ss08" setting allows to make numbers tall as uppercase letters
 *
 * @type List
 * @access private
 */
$_fontFeatureSettings: "ss08" on;

/**
 * Font weight for light typography
 *
 * @type Number
 * @access private
 */
$_fontWeightLight: 200;

/**
 * Font weight for regular typography
 *
 * @type Number
 * @access private
 */
$_fontWeightBook: 400;

/**
 * Font weight for bold typography
 *
 * @type Number
 * @access private
 */
$_fontWeightBold: 700;

/**
 * The map of font-weight available in Pyxis
 *
 * @type Map
 * @access private
 */
$_fontWeights: (
  light: $_fontWeightLight,
  book: $_fontWeightBook,
  bold: $_fontWeightBold,
);

/**
 * The map of fonts and font-weight available in Pyxis
 *
 * @type Map
 * @access private
 */
$_fonts: (
  light: (
    fileName: "CircularXXWeb-Light",
    weight: $_fontWeightLight
  ),
  book: (
    fileName: "CircularXXWeb-Book",
    weight: $_fontWeightBook
  ),
  bold: (
    fileName: "CircularXXWeb-Bold",
    weight: $_fontWeightBold
  ),
);

/**
 + Responsive title map
 *
 * @type Map
 * @access private
 */
$_titleFontSize: (
  xl: (
    base: (
      fontSize: 28px,
    ),
    small: (
      fontSize: 32px,
    ),
    large: (
      fontSize: 40px,
    )
  ),
  l: (
    base: (
      fontSize: 24px,
    ),
    small: (
      fontSize: 26px,
    ),
    large: (
      fontSize: 32px,
    )
  ),
  m: (
    base: (
      fontSize: 20px,
    ),
    small: (
      fontSize: 22px,
    ),
    large: (
      fontSize: 24px,
    )
  ),
  s: (
    base: (
      fontSize: 16px,
    ),
    small: (
      fontSize: 18px,
    ),
    large: (
      fontSize: 20px,
    )
  ),
);

/**
 * Font weights permitted in title
 *
 * @type List
 * @access private
 */
$_titleFontWeight: (book, bold);

/**
 * Responsive text map
 *
 * @type Map
 * @access private
 */
$_textFontSize: (
  l: (
    base: (
      fontSize: 14px,
      letterSpacing: 0.1px,
    ),
    small: (
      fontSize: 16px,
      letterSpacing: 0.1px,
    ),
  ),
  m: (
    base: (
      fontSize: 12px,
      letterSpacing: 0.3px,
    ),
    small: (
      fontSize: 14px,
      letterSpacing: 0.1px,
    ),
  ),
  s: (
    base: (
      fontSize: 12px,
      letterSpacing: 0.3px,
    ),
  ),
);

/**
 * The ratios to apply to line-heights
 *
 * @type Map
 * @access private
 */
$_lineHeightRatio: (
  base: (
    ratio: 1.5,
    from: 32,
  ),
  golden: (
    from: 0,
    ratio: 1.618,
  )
);

/**
 * Includes the properties contained in the typography map
 *
 * @param {Map} $map - The map of fontSize
 * @throws {Error}
 *
 * @access private
 */
@mixin _typographySize($map) {
  $fontSize: lib.getOrDie($map, fontSize);

  font-size: lib.rem($fontSize);
  line-height: _lineHeight($fontSize);

  @if(map-has-key($map, letterSpacing)) {
    letter-spacing: lib.rem(lib.getOrDie($map, letterSpacing));
  }
}

/**
 * Includes the properties contained in the typography map in every breakpoints
 *
 * @param {Map} $map - The map of fontSize
 * @param {String} $size - Name of the $size
 * @throws {Error}
 *
 * @access private
 */
@mixin _responsiveTypographySize($map, $size) {
  @each $breakpoint, $map in lib.getOrDie($map, $size) {
    @if $breakpoint == base {
      @include _typographySize($map);
    } @else {
      @include breakpoints.mq($breakpoint) {
        @include _typographySize($map);
      }
    }
  }
}

/*
 * Returns a line-height of $fontSize
 *
 * @param {Number} $fontSize - The font-size to apply the line-height to
 * @return {Number} - A line-height represented in percentage
 * @throws {Error}
 *
 * @access private
 */
@function _lineHeight($fontSize) {
  @each $name, $map in lib.getOrDie($_lineHeightRatio) {
    @if(lib.stripUnit($fontSize) >= lib.getOrDie($map, from)) {
      @return lib.getOrDie($map, ratio) * 100%;
    }
  }
}

/**
 * Base setting for Pyxis typography
 *
 * @access public
 */
@mixin typographySetting() {
  font-family: $_fontFamilyWithFallback;
  font-feature-settings: $_fontFeatureSettings;
  font-size: global.$fontSizeRoot;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-variant-ligatures: none;
  font-weight: $_fontWeightBook;
  text-rendering: optimizeLegibility;
}

/**
 * Include the font-weight by name available in $_fontWeights
 *
 * @param {String} $weight - The name of the weight
 * @throws {Error}
 *
 * @access public
 */
@mixin fontWeight($weight) {
  font-weight: #{lib.getOrDie($_fonts, $weight, weight)};
}

/**
 * Include the responsive title size by name available in $_titleFontSize
 *
 * @param {String} $size - The name of the size
 * @param {String} $weight - The name of the weight
 * @throws {Error}
 *
 * @access public
 */
@mixin title($size, $weight: bold) {
  @include _responsiveTypographySize($_titleFontSize, $size);

  @if index($_titleFontWeight, $weight) {
    @include fontWeight($weight);
  } @else {
    @error "Font-weight `#{$weight}` is not allowed in titles";
  }
}

/**
 * Include the responsive text size by name available in $_textFontSize
 *
 * @param {String} $size - The name of the size
 * @param {String} $weight - The name of the weight
 * @throws {Error}
 *
 * @access public
 */
@mixin text($size, $weight: book) {
  @include _responsiveTypographySize($_textFontSize, $size);
  @include fontWeight($weight);
}

/**
 * Create atom classes for all title and text variant in $_titleFontSize map and $_textFontSize map
 *
 * @access public
 */
@mixin createTypographyAtoms() {
  @each $titleName, $titleMap in $_titleFontSize {
    @each $weightName in $_titleFontWeight {
      .title-#{lib.camelToKebabCase($titleName)}--#{$weightName} {
        @include title($titleName, $weightName);
      }
    }
  }

  @each $textName, $textMap in $_textFontSize {
    @each $weightName, $weightValue in $_fontWeights {
      .text-#{lib.camelToKebabCase($textName)}--#{$weightName} {
        @include text($textName, $weightName);
      }
    }
  }
}

/**
 * Create @font-face for all fonts available in $_fonts map
 */
@each $name, $font in $_fonts {
  @font-face {
    font-display: fallback;
    font-family: $_fontFamily;
    font-style: normal;
    font-weight: #{map-get($font, weight)};
    src:
      url("#{$fontPath}/#{map-get($font, fileName)}.woff") format("woff"),
      url("#{$fontPath}/#{map-get($font, fileName)}.woff2") format("woff2");
  }
}