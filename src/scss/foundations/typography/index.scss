@use "../../lib";
@use "../breakpoints";
@use "../global";
@use "text";
@use "title";

/**
 * Physical address of the fonts-containing folder
 *
 * @type String
 * @access public
 */
$fontPath: "../assets/fonts" !default;

/**
 * Font display settings
 *
 * @type String
 * @access public
 */
$fontDisplay: swap !default;

/**
 * The font setting map
 * The "ss08" featureSettings allows to make numbers tall as uppercase letters
 *
 * @type Map
 * @access private
 */
$_font: (
  name: "CircularXXWeb",
  fallback: #{"Arial", sans-serif},
  featureSettings: "ss08" on,
  weights: (
    light: 200,
    book: 400,
    bold: 700,
  )
);

/**
 * The line-height map
 *
 * @type Map
 * @access private
 */
$_lineHeight: (
  base: 150%,
  golden: 161.8%,
);

/**
 * The letter-spacing map
 *
 * @type Map
 * @access private
 */
$_letterSpacing: (
  base: 0,
  small: 0.1px,
  medium: 0.3px,
);

/**
 * Returns a font-family with name and fallback
 *
 * @param {Map} $font - The font settings
 * @return {String} - A font-family value
 * @throws {Error}
 *
 * @access private
 */
@function _fontFamily($font) {
  @return #{lib.getOrDie($font, name), lib.getOrDie($font, fallback)};
}


/**
 * Returns a line-height by $fontSize
 *
 * @param {Number} $fontSize - The font-size to apply the line-height to
 * @return {Number} - A line-height represented in percentage
 * @throws {Error}
 *
 * @access private
 */
@function _lineHeight($fontSize) {
  $baseLineHeightFrom: 32;

  @return if(
    lib.stripUnit($fontSize) >= $baseLineHeightFrom,
    lib.getOrDie($_lineHeight, base),
    lib.getOrDie($_lineHeight, golden)
  );
}

/**
 * Returns a letter-spacing by $fontSize
 *
 * @param {Number} $fontSize - The font-size to apply the letter-spacing to
 * @return {Number} - A letter-spacing represented in rem
 * @throws {Error}
 *
 * @access private
 */
@function _letterSpacing($fontSize) {
  $smallLetterSpacingFrom: 14;
  $baseLetterSpacingFrom: 16;

  @if(lib.stripUnit($fontSize) >= $baseLetterSpacingFrom) {
    @return lib.rem(lib.getOrDie($_letterSpacing, base));
  } @else {
    @return if(
      lib.stripUnit($fontSize) >= $smallLetterSpacingFrom,
      lib.rem(lib.getOrDie($_letterSpacing, small)),
      lib.rem(lib.getOrDie($_letterSpacing, medium))
    );
  }
}

/**
 * Include the font-weight value by name
 *
 * @param {String} $weight - The name of the weight
 * @throws {Error}
 *
 * @access private
 */
@mixin _fontWeight($weight) {
  font-weight: #{lib.getOrDie($_font, weights, $weight)};
}

/**
 * Includes the properties contained in the typography map in every breakpoints
 *
 * @param {Map} $fontSizes - The map of fontSize
 * @param {String} $size - Name of the $size
 * @throws {Error}
 *
 * @access private
 */
@mixin _responsiveTypographySize($fontSizes, $size) {
  @each $breakpoint, $value in lib.getOrDie($fontSizes, $size) {
    @include breakpoints.mq($breakpoint) {
      $fontSize: lib.getOrDie($fontSizes, $size, $breakpoint);

      font-size: lib.rem($fontSize);
      letter-spacing: _letterSpacing($fontSize);
      line-height: _lineHeight($fontSize);
    }
  }
}

/**
 * Include the responsive title size by name available in title.$fontSizes
 *
 * @param {String} $size - The name of the size
 * @param {String} $weight - The name of the weight
 * @throws {Error}
 *
 * @access public
 */
@mixin title($size, $weight: bold) {
  @include _responsiveTypographySize(title.$fontSizes, $size);

  @if index(title.$allowedFontWeights, $weight) {
    @include _fontWeight($weight);
  } @else {
    @error "Font-weight `#{$weight}` is not allowed in titles";
  }
}

/**
 * Include the responsive text size by name available in text.$fontSizes
 *
 * @param {String} $size - The name of the size
 * @param {String} $weight - The name of the weight
 * @throws {Error}
 *
 * @access public
 */
@mixin text($size, $weight: book) {
  @include _fontWeight($weight);
  @include _responsiveTypographySize(text.$fontSizes, $size);
}

/**
 * Base setting for Pyxis typography
 * To be used only in the html tag
 *
 * @access public
 */
@mixin typographySetting() {
  @include _fontWeight(book);
  font-family: _fontFamily($_font);
  font-feature-settings: lib.getOrDie($_font, featureSettings);
  font-size: global.$fontSizeRoot;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-variant-ligatures: none;
  text-rendering: optimizeLegibility;
}

/**
 * Create atom classes for all title and text variant
 *
 * @access public
 */
@mixin createAtoms() {
  @each $size, $_ in title.$fontSizes {
    @each $weight in title.$allowedFontWeights {
      .title-#{lib.camelToKebabCase($size)}--#{$weight} {
        @include title($size, $weight);
      }
    }
  }

  @each $size, $_ in text.$fontSizes {
    @each $weight in text.$allowedFontWeights {
      .text-#{lib.camelToKebabCase($size)}--#{$weight} {
        @include text($size, $weight);
      }
    }
  }
}

/**
 * Create @font-face for all fonts available in $_fonts map
 */
@each $name, $weight in lib.getOrDie($_font, weights) {
  $fileName: #{lib.getOrDie($_font, name)}-#{lib.capitalize($name)};

  @font-face {
    font-display: $fontDisplay;
    font-family: lib.getOrDie($_font, name);
    font-style: normal;
    font-weight: $weight;
    src:
      url("#{$fontPath}/#{$fileName}.woff") format("woff"),
      url("#{$fontPath}/#{$fileName}.woff2") format("woff2");
  }
}