////
/// Typography defines all fonts-related rules.
///
/// @group TYPOGRAPHY
////

@use "../../config.scss";
@use "../../lib";
@use "../breakpoints";
@use "text";
@use "title";

/// The font setting map
/// The "ss08" featureSettings allows to make numbers tall as uppercase letters
///
/// @type Map
/// @access private

$_font: (
  name: "CircularXXWeb",
  fallback: #{"Arial",
  sans-serif},
  featureSettings: "ss08" on,
  weights: (
    light: 200,
    book: 400,
    bold: 700,
  ),
);

/// The line-height map
///
/// @type Map
/// @access private
$_lineHeight: (
  base: 150%,
  golden: 161.8%,
);

/// The letter-spacing map
///
/// @type Map
/// @access private
$_letterSpacing: (
  base: 0,
  small: 0.1px,
  medium: 0.3px,
);

/// Returns a font-family with name and fallback
///
/// @param {Map} $font - The font settings
/// @return {String} - A font-family value
/// @throw {Error}
/// @access private
@function _fontFamily($font) {
  @return #{lib.getOrDie($font, name), lib.getOrDie($font, fallback)};
}

/// Returns a line-height by $fontSize
///
/// @param {Number} $fontSize - The font-size to apply the line-height to
/// @return {Number} - A line-height represented in percentage
/// @throw {Error}
/// @access private
@function _lineHeight($fontSize) {
  $shouldUseBaseLineHeight: lib.stripUnit($fontSize) >= 32;

  @return if($shouldUseBaseLineHeight, lib.getOrDie($_lineHeight, base), lib.getOrDie($_lineHeight, golden));
}

/// Returns a letter-spacing by $fontSize
///
/// @param {Number} $fontSize - The font-size to apply the letter-spacing to
/// @return {Number} - A letter-spacing represented in rem
/// @throw {Error}
/// @access private
@function _letterSpacing($fontSize) {
  $shouldUseBaseLetterSpacing: lib.stripUnit($fontSize) >= 16;
  $shouldUseSmallLetterSpacing: lib.stripUnit($fontSize) >= 14;

  @if ($shouldUseBaseLetterSpacing) {
    @return lib.rem(lib.getOrDie($_letterSpacing, base));
  } @else {
    @return if(
      $shouldUseSmallLetterSpacing,
      lib.rem(lib.getOrDie($_letterSpacing, small)),
      lib.rem(lib.getOrDie($_letterSpacing, medium))
    );
  }
}

/// Base setting for Pyxis typography
/// To be used only in the html tag
/// @access public
@mixin typographyGlobalSettings() {
  @include _fontWeight(book);
  font-family: _fontFamily($_font);
  font-feature-settings: lib.getOrDie($_font, featureSettings);
  font-size: config.$fontSizeRoot;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-variant-ligatures: none;
  text-rendering: optimizeLegibility;
}

/// Include the font-weight value by name
///
/// @param {String} $weight - The name of the weight
/// @throw {Error}
/// @access private
@mixin _fontWeight($weight) {
  font-weight: #{lib.getOrDie($_font, weights, $weight)};
}

/// Includes the properties contained in the typography map in every breakpoints
///
/// @param {Map} $fontSizes - The map of fontSize
/// @param {String} $size - Name of the $size
/// @throw {Error}
/// @access private
@mixin _size($fontSizes, $size) {
  @each $breakpoint, $value in lib.getOrDie($fontSizes, $size) {
    @include breakpoints.mq($breakpoint) {
      $fontSize: lib.getOrDie($fontSizes, $size, $breakpoint);

      font-size: lib.rem($fontSize);
      letter-spacing: _letterSpacing($fontSize);
      line-height: _lineHeight($fontSize);
    }
  }
}

/// Include the responsive title size by name available in title.$fontSizes
///
/// @param {String} $size - The name of the size
/// @param {String} $weight - The name of the weight
/// @throw {Error}
/// @access public
@mixin title($size, $weight) {
  @include _size(title.$fontSizes, $size);

  @if index(title.$allowedFontWeights, $weight) {
    @include _fontWeight($weight);
  } @else {
    @error "Font-weight `#{$weight}` is not allowed in titles";
  }
}

/// Include the responsive text size by name available in text.$fontSizes
///
/// @param {String} $size - The name of the size
/// @param {String} $weight - The name of the weight
/// @throw {Error}
/// @access public
@mixin text($size, $weight) {
  @include _fontWeight($weight);
  @include _size(text.$fontSizes, $size);
}

/// Create @font-face for all fonts available in $_fonts map
/// @access public
@mixin fontFaces() {
  @each $name, $weight in lib.getOrDie($_font, weights) {
    $fileName: #{lib.getOrDie($_font, name)}-#{lib.capitalize($name)};

    @font-face {
      font-display: config.$fontDisplay;
      font-family: lib.getOrDie($_font, name);
      font-style: normal;
      font-weight: $weight;
      src: url("#{config.$fontPath}/#{$fileName}.woff") format("woff"),
        url("#{config.$fontPath}/#{$fileName}.woff2") format("woff2");
    }
  }
}

/// Create atom classes for all title and text variant
/// @access public
@mixin createAtoms() {
  @each $size, $_ in title.$fontSizes {
    @each $weight in title.$allowedFontWeights {
      .title-#{lib.camelToKebabCase($size)}--#{$weight} {
        @include title($size, $weight);
      }
    }
  }

  @each $size, $_ in text.$fontSizes {
    @each $weight in text.$allowedFontWeights {
      .text-#{lib.camelToKebabCase($size)}--#{$weight} {
        @include text($size, $weight);
      }
    }
  }
}

/// Generate @font-face
@include fontFaces();
