////
/// Breakpoints define a small set of function used to adjust your
/// style based on device width.
/// @group BREAKPOINTS
////

@use "../lib";

$_breakpointBase: 1px;
$_breakpointXxsmall: 375px;
$_breakpointXsmall: 576px;
$_breakpointSmall: 768px;
$_breakpointMedium: 992px;
$_breakpointLarge: 1200px;
$_breakpointXlarge: 1680px;

/// The breakpoints of Pyxis
///
/// @type Map
/// @access private
$_breakpoints: (
  base: $_breakpointBase,
  xxsmall: $_breakpointXxsmall,
  xsmall: $_breakpointXsmall,
  small: $_breakpointSmall,
  medium: $_breakpointMedium,
  large: $_breakpointLarge,
  xlarge: $_breakpointXlarge,
);

/// The breakpoints of Pyxis.  
/// <em style="font-size:small;">This variable is private, please use functions below to
/// retrieve a single value or all the map.</em>
///
/// @prop {Number} base [1px]
/// @prop {Number} xxsmall [375px]
/// @prop {Number} xsmall [576px]
/// @prop {Number} small [768px]
/// @prop {Number} medium [992px]
/// @prop {Number} large [1200px]
/// @prop {Number} xlarge [1680px]
/// 
/// @type Map
$_breakpointMap: ();

/// Breakpoint bounding difference
///
/// @type Value
/// @access private
$_boundDiff: 1px;

/// Returns the `$breakpoint` value from `$_breakpointMap`
/// based on the key in input.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @return {Number} The minimum value in which the breakpoint will be triggered
///
/// @example scss - Get the breakpoint value
///   breakpoint(medium)
///   // 992px
///
/// @access public
@function breakpoint($breakpoint) {
  @return lib.getOrDie($_breakpoints, $breakpoint);
}

/// Returns the entire `$_breakpointMap`.
///
/// @return {Map} The breakpoint map
///
/// @access public
@function breakpoints() {
  @return $_breakpoints;
}

/// Check if the breakpoint is `base`.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @return {Boolean}
///
/// @example scss - Check if a breakpoint is base
///   @each $breakpointName, $_ in $_breakpointMap {
///     @debug($breakpointName, isBase($breakpointName))
///   }
///   //  base, true
///   //  xxsmall, false
///   //  xsmall, false
///   //  small, false
///   //  medium, false
///   //  large, false
///   //  xlarge, false
///
/// @access public
@function isBase($breakpoint) {
  @return $breakpoint == base;
}

/// Check if breakpoint is strictly greater than the second one passed as input.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $lowerBound - Name of breakpoint to compare with
/// @return {Boolean}
///
/// @example scss - Check if a breakpoint is strictly greater than the other
///   isGreaterThan(medium, medium)
///   // false
/// @example scss - Check if a breakpoint is strictly greater than the other
///   isGreaterThan(large, medium)
///   // true
///
/// @access public
@function isGreaterThan($breakpoint, $lowerBound) {
  @return breakpoint($breakpoint) > breakpoint($lowerBound);
}

/// Check if a breakpoint is strictly lower than the second one passed as input.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $upperBound - Name of breakpoint to compare with
/// @return {Boolean}
///
/// @example scss - Check if a breakpoint is strictly lower than the other
///   isLowerThan(medium, medium)
///   // false
/// @example scss - Check if a breakpoint is strictly lower than the other
///   isLowerThan(medium, large)
///   // true
///
/// @access public
@function isLowerThan($breakpoint, $upperBound) {
  @return breakpoint($breakpoint) < breakpoint($upperBound);
}

/// Check if two breakpoints are equal.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $otherTerm - Name of breakpoint to compare with
/// @return {Boolean}
///
/// @example scss - Check if two breakpoints are equal
///   isEqualTo(medium, medium)
///   // true
///
/// @access public
@function isEqualTo($breakpoint, $otherTerm) {
  @return breakpoint($breakpoint) == breakpoint($otherTerm);
}

/// Check if breakpoint is greater than or equal to the second one passed as input.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $upperBound - Name of breakpoint to compare with
/// @return {Boolean}
///
/// @example scss - Check if a breakpoint is greater than the other
///   isGreaterOrEqualTo(medium, medium)
///   // true
/// @example scss - Check if a breakpoint is greater than the other
///   isGreaterOrEqualTo(large, medium)
///   // true
///
/// @access public
@function isGreaterOrEqualTo($breakpoint, $upperBound) {
  @return isGreaterThan($breakpoint, $upperBound) or isEqualTo($breakpoint, $upperBound);
}

/// Check if breakpoint is lower than or equal to the second one passed as input.
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $lowerBound - Name of breakpoint to compare with
/// @return {Boolean}
///
/// @example scss - Check if a breakpoint is lower than the other
///   isLowerOrEqualTo(medium, medium)
///   // true
/// @example scss - Check if a breakpoint is lower than the other
///   isLowerOrEqualTo(medium, large)
///   // true
///
/// @access public
@function isLowerOrEqualTo($breakpoint, $lowerBound) {
  @return isLowerThan($breakpoint, $lowerBound) or isEqualTo($breakpoint, $lowerBound);
}

/// Wraps `@content` inside a media-query with a `min-width` and `max-width` (optional).
///
/// @param {String} $from - Name of breakpoint
/// @param {String | Null} $until [null] - Name of breakpoint
///
/// @output `@content` inside a media-query
///
/// @example scss - Set of rules valid from `small` breakpoint
/// .element {
///   @include mq(small) {
///     ...
///   }
/// }
/// @example scss - Set of rules valid between `small` and `large`
/// .element {
///   @include mq(small, large) {
///     ...
///   }
/// }
///
/// @throw Error if `$from` value is lower or equal to `$until` value
/// @access public
@mixin mq($from, $until: null) {
  $mediaQuery: "screen and (min-width: #{breakpoint($from)})";

  @if isBase($from) and lib.isNull($until) {
    @content;
  } @else {
    @if $until {
      @if breakpoint($until) > breakpoint($from) {
        $mediaQuery: "#{$mediaQuery} and (max-width: #{breakpoint($until) - $_boundDiff})";
      } @else {
        @error "You cannot use a `$until` value smaller or equal than `$from` value";
      }
    }
    @media #{$mediaQuery} {
      @content;
    }
  }
}
