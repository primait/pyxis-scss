////
/// Breakpoints define a small set of function used to adjust your
/// style based on device width.
/// @group BREAKPOINTS
////

@use "../lib";

$_breakpointBase: 1px;
$_breakpointXxsmall: 375px;
$_breakpointXsmall: 576px;
$_breakpointSmall: 768px;
$_breakpointMedium: 992px;
$_breakpointLarge: 1200px;
$_breakpointXlarge: 1680px;

/// The breakpoints of Pyxis
///
/// @type Map
/// @access private
$_breakpoints: (
  base: $_breakpointBase,
  xxsmall: $_breakpointXxsmall,
  xsmall: $_breakpointXsmall,
  small: $_breakpointSmall,
  medium: $_breakpointMedium,
  large: $_breakpointLarge,
  xlarge: $_breakpointXlarge,
);

/// Breakpoint bounding difference
///
/// @type Value
/// @access private
$_boundDiff: 1px;

/// Returns the $breakpoint value from map $breakpoints
///
/// @param {String} $breakpoint - Name of breakpoint
/// @return {Number} The min-value in which the breakpoint will be triggered
/// @throw {Error}
/// @access public
@function breakpoint($breakpoint) {
  @return lib.getOrDie($_breakpoints, $breakpoint);
}

/// Returns the entire $_breakpoints map
///
/// @return {Map} The breakpoint map
/// @throw {Error}
/// @access public
@function breakpoints() {
  @return $_breakpoints;
}

/// Check if the breakpoint is "base"
///
/// @param {String} $breakpoint - Name of breakpoint
/// @return {Boolean}
/// @throw {Error}
/// @access public
@function isBase($breakpoint) {
  @return $breakpoint == base;
}

/// Check if breakpoint is lower than `$upperBound`
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $upperBound - Name of breakpoint to compare with
/// @return {Boolean}
/// @throw {Error}
/// @access public
@function isLowerThan($breakpoint, $upperBound) {
  @return breakpoint($breakpoint) < breakpoint($upperBound);
}

/// Check if breakpoint is greater than `$lowerBound`
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $lowerBound - Name of breakpoint to compare with
/// @return {Boolean}
/// @throw {Error}
/// @access public
@function isGreaterThan($breakpoint, $lowerBound) {
  @return breakpoint($breakpoint) > breakpoint($lowerBound);
}

/// Check if breakpoint is equal to `$otherTerm`
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $otherTerm - Name of breakpoint to compare with
/// @return {Boolean}
/// @throw {Error}
/// @access public
@function isEqualTo($breakpoint, $otherTerm) {
  @return breakpoint($breakpoint) == breakpoint($otherTerm);
}

/// Check if breakpoint is greater than or equal to `$upperBound`
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $upperBound - Name of breakpoint to compare with
/// @return {Boolean}
/// @throw {Error}
/// @access public
@function isGreaterOrEqualTo($breakpoint, $upperBound) {
  @return isGreaterThan($breakpoint, $upperBound) or isEqualTo($breakpoint, $upperBound);
}

/// Check if breakpoint is lower than or equal to `$lowerBound`
///
/// @param {String} $breakpoint - Name of breakpoint
/// @param {String} $lowerBound - Name of breakpoint to compare with
/// @return {Boolean}
/// @throw {Error}
/// @access public
@function isLowerOrEqualTo($breakpoint, $lowerBound) {
  @return isLowerThan($breakpoint, $lowerBound) or isEqualTo($breakpoint, $lowerBound);
}

/// Wraps @content inside a media-query with a min-width and max-width (optional)
///
/// @param {String} $from - Name of breakpoint
/// @param {String | Null} $until - Name of breakpoint
/// @throw {Error}
/// @access public
@mixin mq($from, $until: null) {
  $mediaQuery: "screen and (min-width: #{breakpoint($from)})";

  @if isBase($from) and lib.isNull($until) {
    @content;
  } @else {
    @if $until {
      @if breakpoint($until) > breakpoint($from) {
        $mediaQuery: "#{$mediaQuery} and (max-width: #{breakpoint($until) - $_boundDiff})";
      } @else {
        @error "You cannot use a `$until` value smaller or equal than `$from` value";
      }
    }
    @media #{$mediaQuery} {
      @content;
    }
  }
}
